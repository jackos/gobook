// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KernelClient is the client API for Kernel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KernelClient interface {
	Session(ctx context.Context, opts ...grpc.CallOption) (Kernel_SessionClient, error)
}

type kernelClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelClient(cc grpc.ClientConnInterface) KernelClient {
	return &kernelClient{cc}
}

func (c *kernelClient) Session(ctx context.Context, opts ...grpc.CallOption) (Kernel_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Kernel_ServiceDesc.Streams[0], "/Kernel/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelSessionClient{stream}
	return x, nil
}

type Kernel_SessionClient interface {
	Send(*ToServer) error
	Recv() (*ToClient, error)
	grpc.ClientStream
}

type kernelSessionClient struct {
	grpc.ClientStream
}

func (x *kernelSessionClient) Send(m *ToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kernelSessionClient) Recv() (*ToClient, error) {
	m := new(ToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KernelServer is the server API for Kernel service.
// All implementations must embed UnimplementedKernelServer
// for forward compatibility
type KernelServer interface {
	Session(Kernel_SessionServer) error
	mustEmbedUnimplementedKernelServer()
}

// UnimplementedKernelServer must be embedded to have forward compatible implementations.
type UnimplementedKernelServer struct {
}

func (UnimplementedKernelServer) Session(Kernel_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedKernelServer) mustEmbedUnimplementedKernelServer() {}

// UnsafeKernelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KernelServer will
// result in compilation errors.
type UnsafeKernelServer interface {
	mustEmbedUnimplementedKernelServer()
}

func RegisterKernelServer(s grpc.ServiceRegistrar, srv KernelServer) {
	s.RegisterService(&Kernel_ServiceDesc, srv)
}

func _Kernel_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KernelServer).Session(&kernelSessionServer{stream})
}

type Kernel_SessionServer interface {
	Send(*ToClient) error
	Recv() (*ToServer, error)
	grpc.ServerStream
}

type kernelSessionServer struct {
	grpc.ServerStream
}

func (x *kernelSessionServer) Send(m *ToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kernelSessionServer) Recv() (*ToServer, error) {
	m := new(ToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Kernel_ServiceDesc is the grpc.ServiceDesc for Kernel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kernel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Kernel",
	HandlerType: (*KernelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _Kernel_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kernel.proto",
}
